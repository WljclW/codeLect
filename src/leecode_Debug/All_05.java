package leecode_Debug;

/**
 * @author mini-zch
 * @date 2025/5/26 19:14
 */
public class All_05 {
        /*153.
    已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
    若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。
给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。
你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
    * */
    /**
     * 【注意】
     * 【关键】每次拿着mid位置的值 和 最后一个数比较：
     *           如果小于数组的最后一个数，说明mid必然在后半边，移动r指针为mid-1，在后面的区域继续找
     *           如果大于数组的最后一个数，说明mid必然在前半边，移动l指针为mid+1，在后面的取余继续找
     *  1. 为什么选择跟最后一个数比较？与第一个数比较行不行？
     *    答：
     * */
    public int findMin(int[] nums) {
        int l = 0,r = nums.length-1;
        while (l<=r){
            int mid = l+(r-l)/2;
            if (nums[mid]<nums[nums.length-1]){
                r = mid-1;
            }else {
                l = mid+1;
            }
        }
        return nums[l];
    }
}
